
STM32F103RB_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000b18  08000b18  00001b18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000b44  08000b44  00001b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000b48  08000b48  00001b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000b4c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  2000000c  08000b58  0000200c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000040  08000b58  00002040  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002f33  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000eef  00000000  00000000  00004f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loclists 00000b21  00000000  00000000  00005e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000328  00000000  00000000  00006978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000002fd  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00000bcd  00000000  00000000  00006f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00004a9d  00000000  00000000  00007b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00079f4a  00000000  00000000  0000c607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00086551  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000066c  00000000  00000000  00086594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000127  00000000  00000000  00086c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000b00 	.word	0x08000b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000b00 	.word	0x08000b00

0800014c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800014c:	4b0f      	ldr	r3, [pc, #60]	@ (800018c <SystemInit+0x40>)
 800014e:	681a      	ldr	r2, [r3, #0]
 8000150:	f042 0201 	orr.w	r2, r2, #1
 8000154:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000156:	6859      	ldr	r1, [r3, #4]
 8000158:	4a0d      	ldr	r2, [pc, #52]	@ (8000190 <SystemInit+0x44>)
 800015a:	400a      	ands	r2, r1
 800015c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800015e:	681a      	ldr	r2, [r3, #0]
 8000160:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8000164:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000168:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000170:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000172:	685a      	ldr	r2, [r3, #4]
 8000174:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 8000178:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800017a:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 800017e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000180:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000184:	4b03      	ldr	r3, [pc, #12]	@ (8000194 <SystemInit+0x48>)
 8000186:	609a      	str	r2, [r3, #8]
#endif 
}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	40021000 	.word	0x40021000
 8000190:	f8ff0000 	.word	0xf8ff0000
 8000194:	e000ed00 	.word	0xe000ed00

08000198 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000198:	4770      	bx	lr
	...

0800019c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800019c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 80001a0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001a2:	4e0d      	ldr	r6, [pc, #52]	@ (80001d8 <HAL_InitTick+0x3c>)
{
 80001a4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001a6:	7832      	ldrb	r2, [r6, #0]
 80001a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80001ac:	4a0b      	ldr	r2, [pc, #44]	@ (80001dc <HAL_InitTick+0x40>)
 80001ae:	6810      	ldr	r0, [r2, #0]
 80001b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001b4:	f000 f87a 	bl	80002ac <HAL_SYSTICK_Config>
 80001b8:	4604      	mov	r4, r0
 80001ba:	b950      	cbnz	r0, 80001d2 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001bc:	2d0f      	cmp	r5, #15
 80001be:	d808      	bhi.n	80001d2 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001c0:	4602      	mov	r2, r0
 80001c2:	4629      	mov	r1, r5
 80001c4:	f04f 30ff 	mov.w	r0, #4294967295
 80001c8:	f000 f840 	bl	800024c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001cc:	4620      	mov	r0, r4
 80001ce:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80001d0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80001d2:	2001      	movs	r0, #1
 80001d4:	e7fc      	b.n	80001d0 <HAL_InitTick+0x34>
 80001d6:	bf00      	nop
 80001d8:	20000004 	.word	0x20000004
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e0:	4a07      	ldr	r2, [pc, #28]	@ (8000200 <HAL_Init+0x20>)
{
 80001e2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e8:	f043 0310 	orr.w	r3, r3, #16
 80001ec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ee:	f000 f81b 	bl	8000228 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f2:	200f      	movs	r0, #15
 80001f4:	f7ff ffd2 	bl	800019c <HAL_InitTick>
  HAL_MspInit();
 80001f8:	f7ff ffce 	bl	8000198 <HAL_MspInit>
}
 80001fc:	2000      	movs	r0, #0
 80001fe:	bd08      	pop	{r3, pc}
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000204:	4a03      	ldr	r2, [pc, #12]	@ (8000214 <HAL_IncTick+0x10>)
 8000206:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <HAL_IncTick+0x14>)
 8000208:	6811      	ldr	r1, [r2, #0]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	440b      	add	r3, r1
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000028 	.word	0x20000028
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800021c:	4b01      	ldr	r3, [pc, #4]	@ (8000224 <HAL_GetTick+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028

08000228 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	4907      	ldr	r1, [pc, #28]	@ (8000248 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800022a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800022c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800022e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000232:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000236:	0412      	lsls	r2, r2, #16
 8000238:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800023a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000244:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800024e:	b530      	push	{r4, r5, lr}
 8000250:	68dc      	ldr	r4, [r3, #12]
 8000252:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000256:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025c:	2b04      	cmp	r3, #4
 800025e:	bf28      	it	cs
 8000260:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000264:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000268:	bf94      	ite	ls
 800026a:	2400      	movls	r4, #0
 800026c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	fa05 f303 	lsl.w	r3, r5, r3
 8000272:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000276:	40a5      	lsls	r5, r4
 8000278:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800027e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000280:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfac      	ite	ge
 8000286:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028a:	4a07      	ldrlt	r2, [pc, #28]	@ (80002a8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000290:	b2db      	uxtb	r3, r3
 8000292:	bfab      	itete	ge
 8000294:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	e000ed00 	.word	0xe000ed00
 80002a8:	e000ed14 	.word	0xe000ed14

080002ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002ac:	3801      	subs	r0, #1
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80002b2:	d20b      	bcs.n	80002cc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	21f0      	movs	r1, #240	@ 0xf0
 80002ba:	4a05      	ldr	r2, [pc, #20]	@ (80002d0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002bc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002ca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002cc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ce:	4770      	bx	lr
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002d8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002da:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002dc:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8000468 <HAL_GPIO_Init+0x194>
 80002e0:	4b62      	ldr	r3, [pc, #392]	@ (800046c <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 80002e2:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8000470 <HAL_GPIO_Init+0x19c>
 80002e6:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8000474 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002ea:	680a      	ldr	r2, [r1, #0]
 80002ec:	fa32 f506 	lsrs.w	r5, r2, r6
 80002f0:	d102      	bne.n	80002f8 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80002f2:	b003      	add	sp, #12
 80002f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002f8:	2701      	movs	r7, #1
 80002fa:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fc:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8000300:	ea37 0202 	bics.w	r2, r7, r2
 8000304:	d17a      	bne.n	80003fc <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8000306:	684a      	ldr	r2, [r1, #4]
 8000308:	2a03      	cmp	r2, #3
 800030a:	d807      	bhi.n	800031c <HAL_GPIO_Init+0x48>
 800030c:	3a01      	subs	r2, #1
 800030e:	2a02      	cmp	r2, #2
 8000310:	f200 8083 	bhi.w	800041a <HAL_GPIO_Init+0x146>
 8000314:	e8df f002 	tbb	[pc, r2]
 8000318:	9792      	.short	0x9792
 800031a:	9d          	.byte	0x9d
 800031b:	00          	.byte	0x00
 800031c:	2a12      	cmp	r2, #18
 800031e:	f000 8095 	beq.w	800044c <HAL_GPIO_Init+0x178>
 8000322:	d86d      	bhi.n	8000400 <HAL_GPIO_Init+0x12c>
 8000324:	2a11      	cmp	r2, #17
 8000326:	f000 808b 	beq.w	8000440 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800032a:	2dff      	cmp	r5, #255	@ 0xff
 800032c:	bf98      	it	ls
 800032e:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000330:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000334:	bf88      	it	hi
 8000336:	f100 0904 	addhi.w	r9, r0, #4
 800033a:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800033e:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000342:	bf88      	it	hi
 8000344:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000346:	fa0b fa02 	lsl.w	sl, fp, r2
 800034a:	ea27 070a 	bic.w	r7, r7, sl
 800034e:	fa04 f202 	lsl.w	r2, r4, r2
 8000352:	4317      	orrs	r7, r2
 8000354:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000358:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800035c:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8000360:	d04c      	beq.n	80003fc <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000366:	f026 0703 	bic.w	r7, r6, #3
 800036a:	f042 0201 	orr.w	r2, r2, #1
 800036e:	f8cc 2018 	str.w	r2, [ip, #24]
 8000372:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000376:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800037a:	f002 0201 	and.w	r2, r2, #1
 800037e:	9201      	str	r2, [sp, #4]
 8000380:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000384:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000388:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800038a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800038e:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000390:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000394:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000398:	4a37      	ldr	r2, [pc, #220]	@ (8000478 <HAL_GPIO_Init+0x1a4>)
 800039a:	4290      	cmp	r0, r2
 800039c:	d05d      	beq.n	800045a <HAL_GPIO_Init+0x186>
 800039e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d05b      	beq.n	800045e <HAL_GPIO_Init+0x18a>
 80003a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d059      	beq.n	8000462 <HAL_GPIO_Init+0x18e>
 80003ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80003b2:	4290      	cmp	r0, r2
 80003b4:	bf14      	ite	ne
 80003b6:	2204      	movne	r2, #4
 80003b8:	2203      	moveq	r2, #3
 80003ba:	fa02 f20a 	lsl.w	r2, r2, sl
 80003be:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80003c2:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c4:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c6:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ca:	bf14      	ite	ne
 80003cc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003ce:	43aa      	biceq	r2, r5
 80003d0:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d2:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003d4:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d8:	bf14      	ite	ne
 80003da:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003dc:	43aa      	biceq	r2, r5
 80003de:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80003e0:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003e2:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003e6:	bf14      	ite	ne
 80003e8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ea:	43aa      	biceq	r2, r5
 80003ec:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ee:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003f0:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003f4:	bf14      	ite	ne
 80003f6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003f8:	43aa      	biceq	r2, r5
 80003fa:	601a      	str	r2, [r3, #0]
	position++;
 80003fc:	3601      	adds	r6, #1
 80003fe:	e774      	b.n	80002ea <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000400:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800047c <HAL_GPIO_Init+0x1a8>
 8000404:	454a      	cmp	r2, r9
 8000406:	d008      	beq.n	800041a <HAL_GPIO_Init+0x146>
 8000408:	d810      	bhi.n	800042c <HAL_GPIO_Init+0x158>
 800040a:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800040e:	454a      	cmp	r2, r9
 8000410:	d003      	beq.n	800041a <HAL_GPIO_Init+0x146>
 8000412:	4572      	cmp	r2, lr
 8000414:	d001      	beq.n	800041a <HAL_GPIO_Init+0x146>
 8000416:	4542      	cmp	r2, r8
 8000418:	d187      	bne.n	800032a <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800041a:	688a      	ldr	r2, [r1, #8]
 800041c:	b1da      	cbz	r2, 8000456 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800041e:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000420:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8000424:	bf0c      	ite	eq
 8000426:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8000428:	6147      	strne	r7, [r0, #20]
 800042a:	e77e      	b.n	800032a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800042c:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8000480 <HAL_GPIO_Init+0x1ac>
 8000430:	454a      	cmp	r2, r9
 8000432:	d0f2      	beq.n	800041a <HAL_GPIO_Init+0x146>
 8000434:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8000438:	454a      	cmp	r2, r9
 800043a:	e7ed      	b.n	8000418 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800043c:	68cc      	ldr	r4, [r1, #12]
          break;
 800043e:	e774      	b.n	800032a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000440:	68cc      	ldr	r4, [r1, #12]
 8000442:	3404      	adds	r4, #4
          break;
 8000444:	e771      	b.n	800032a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000446:	68cc      	ldr	r4, [r1, #12]
 8000448:	3408      	adds	r4, #8
          break;
 800044a:	e76e      	b.n	800032a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800044c:	68cc      	ldr	r4, [r1, #12]
 800044e:	340c      	adds	r4, #12
          break;
 8000450:	e76b      	b.n	800032a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000452:	2400      	movs	r4, #0
 8000454:	e769      	b.n	800032a <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000456:	2404      	movs	r4, #4
 8000458:	e767      	b.n	800032a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800045a:	2200      	movs	r2, #0
 800045c:	e7ad      	b.n	80003ba <HAL_GPIO_Init+0xe6>
 800045e:	2201      	movs	r2, #1
 8000460:	e7ab      	b.n	80003ba <HAL_GPIO_Init+0xe6>
 8000462:	2202      	movs	r2, #2
 8000464:	e7a9      	b.n	80003ba <HAL_GPIO_Init+0xe6>
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	40010400 	.word	0x40010400
 8000470:	10210000 	.word	0x10210000
 8000474:	10110000 	.word	0x10110000
 8000478:	40010800 	.word	0x40010800
 800047c:	10220000 	.word	0x10220000
 8000480:	10310000 	.word	0x10310000

08000484 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000484:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000486:	ea01 0203 	and.w	r2, r1, r3
 800048a:	ea21 0103 	bic.w	r1, r1, r3
 800048e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000492:	6101      	str	r1, [r0, #16]
}
 8000494:	4770      	bx	lr
	...

08000498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800049c:	4605      	mov	r5, r0
 800049e:	b338      	cbz	r0, 80004f0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a0:	6803      	ldr	r3, [r0, #0]
 80004a2:	07db      	lsls	r3, r3, #31
 80004a4:	d410      	bmi.n	80004c8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004a6:	682b      	ldr	r3, [r5, #0]
 80004a8:	079f      	lsls	r7, r3, #30
 80004aa:	d45e      	bmi.n	800056a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004ac:	682b      	ldr	r3, [r5, #0]
 80004ae:	0719      	lsls	r1, r3, #28
 80004b0:	f100 8095 	bmi.w	80005de <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004b4:	682b      	ldr	r3, [r5, #0]
 80004b6:	075a      	lsls	r2, r3, #29
 80004b8:	f100 80c1 	bmi.w	800063e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004bc:	69eb      	ldr	r3, [r5, #28]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	f040 812c 	bne.w	800071c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80004c4:	2000      	movs	r0, #0
 80004c6:	e029      	b.n	800051c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004c8:	4c90      	ldr	r4, [pc, #576]	@ (800070c <HAL_RCC_OscConfig+0x274>)
 80004ca:	6863      	ldr	r3, [r4, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	d007      	beq.n	80004e4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004d4:	6863      	ldr	r3, [r4, #4]
 80004d6:	f003 030c 	and.w	r3, r3, #12
 80004da:	2b08      	cmp	r3, #8
 80004dc:	d10a      	bne.n	80004f4 <HAL_RCC_OscConfig+0x5c>
 80004de:	6863      	ldr	r3, [r4, #4]
 80004e0:	03de      	lsls	r6, r3, #15
 80004e2:	d507      	bpl.n	80004f4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	039c      	lsls	r4, r3, #14
 80004e8:	d5dd      	bpl.n	80004a6 <HAL_RCC_OscConfig+0xe>
 80004ea:	686b      	ldr	r3, [r5, #4]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1da      	bne.n	80004a6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80004f0:	2001      	movs	r0, #1
 80004f2:	e013      	b.n	800051c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004f4:	686b      	ldr	r3, [r5, #4]
 80004f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80004fa:	d112      	bne.n	8000522 <HAL_RCC_OscConfig+0x8a>
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000502:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000504:	f7ff fe8a 	bl	800021c <HAL_GetTick>
 8000508:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	0398      	lsls	r0, r3, #14
 800050e:	d4ca      	bmi.n	80004a6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000510:	f7ff fe84 	bl	800021c <HAL_GetTick>
 8000514:	1b80      	subs	r0, r0, r6
 8000516:	2864      	cmp	r0, #100	@ 0x64
 8000518:	d9f7      	bls.n	800050a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800051a:	2003      	movs	r0, #3
}
 800051c:	b002      	add	sp, #8
 800051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000522:	b99b      	cbnz	r3, 800054c <HAL_RCC_OscConfig+0xb4>
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800052a:	6023      	str	r3, [r4, #0]
 800052c:	6823      	ldr	r3, [r4, #0]
 800052e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000532:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000534:	f7ff fe72 	bl	800021c <HAL_GetTick>
 8000538:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	0399      	lsls	r1, r3, #14
 800053e:	d5b2      	bpl.n	80004a6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000540:	f7ff fe6c 	bl	800021c <HAL_GetTick>
 8000544:	1b80      	subs	r0, r0, r6
 8000546:	2864      	cmp	r0, #100	@ 0x64
 8000548:	d9f7      	bls.n	800053a <HAL_RCC_OscConfig+0xa2>
 800054a:	e7e6      	b.n	800051a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000550:	6823      	ldr	r3, [r4, #0]
 8000552:	d103      	bne.n	800055c <HAL_RCC_OscConfig+0xc4>
 8000554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000558:	6023      	str	r3, [r4, #0]
 800055a:	e7cf      	b.n	80004fc <HAL_RCC_OscConfig+0x64>
 800055c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000560:	6023      	str	r3, [r4, #0]
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000568:	e7cb      	b.n	8000502 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800056a:	4c68      	ldr	r4, [pc, #416]	@ (800070c <HAL_RCC_OscConfig+0x274>)
 800056c:	6863      	ldr	r3, [r4, #4]
 800056e:	f013 0f0c 	tst.w	r3, #12
 8000572:	d007      	beq.n	8000584 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000574:	6863      	ldr	r3, [r4, #4]
 8000576:	f003 030c 	and.w	r3, r3, #12
 800057a:	2b08      	cmp	r3, #8
 800057c:	d110      	bne.n	80005a0 <HAL_RCC_OscConfig+0x108>
 800057e:	6863      	ldr	r3, [r4, #4]
 8000580:	03da      	lsls	r2, r3, #15
 8000582:	d40d      	bmi.n	80005a0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	079b      	lsls	r3, r3, #30
 8000588:	d502      	bpl.n	8000590 <HAL_RCC_OscConfig+0xf8>
 800058a:	692b      	ldr	r3, [r5, #16]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d1af      	bne.n	80004f0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	696a      	ldr	r2, [r5, #20]
 8000594:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000598:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800059c:	6023      	str	r3, [r4, #0]
 800059e:	e785      	b.n	80004ac <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a0:	692a      	ldr	r2, [r5, #16]
 80005a2:	4b5b      	ldr	r3, [pc, #364]	@ (8000710 <HAL_RCC_OscConfig+0x278>)
 80005a4:	b16a      	cbz	r2, 80005c2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005aa:	f7ff fe37 	bl	800021c <HAL_GetTick>
 80005ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	079f      	lsls	r7, r3, #30
 80005b4:	d4ec      	bmi.n	8000590 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005b6:	f7ff fe31 	bl	800021c <HAL_GetTick>
 80005ba:	1b80      	subs	r0, r0, r6
 80005bc:	2802      	cmp	r0, #2
 80005be:	d9f7      	bls.n	80005b0 <HAL_RCC_OscConfig+0x118>
 80005c0:	e7ab      	b.n	800051a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80005c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c4:	f7ff fe2a 	bl	800021c <HAL_GetTick>
 80005c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	0798      	lsls	r0, r3, #30
 80005ce:	f57f af6d 	bpl.w	80004ac <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005d2:	f7ff fe23 	bl	800021c <HAL_GetTick>
 80005d6:	1b80      	subs	r0, r0, r6
 80005d8:	2802      	cmp	r0, #2
 80005da:	d9f6      	bls.n	80005ca <HAL_RCC_OscConfig+0x132>
 80005dc:	e79d      	b.n	800051a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005de:	69aa      	ldr	r2, [r5, #24]
 80005e0:	4e4a      	ldr	r6, [pc, #296]	@ (800070c <HAL_RCC_OscConfig+0x274>)
 80005e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000710 <HAL_RCC_OscConfig+0x278>)
 80005e4:	b1e2      	cbz	r2, 8000620 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80005e6:	2201      	movs	r2, #1
 80005e8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80005ec:	f7ff fe16 	bl	800021c <HAL_GetTick>
 80005f0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80005f4:	079b      	lsls	r3, r3, #30
 80005f6:	d50d      	bpl.n	8000614 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005f8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80005fc:	4b45      	ldr	r3, [pc, #276]	@ (8000714 <HAL_RCC_OscConfig+0x27c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	fbb3 f3f2 	udiv	r3, r3, r2
 8000604:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000606:	bf00      	nop
  }
  while (Delay --);
 8000608:	9b01      	ldr	r3, [sp, #4]
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f9      	bne.n	8000606 <HAL_RCC_OscConfig+0x16e>
 8000612:	e74f      	b.n	80004b4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000614:	f7ff fe02 	bl	800021c <HAL_GetTick>
 8000618:	1b00      	subs	r0, r0, r4
 800061a:	2802      	cmp	r0, #2
 800061c:	d9e9      	bls.n	80005f2 <HAL_RCC_OscConfig+0x15a>
 800061e:	e77c      	b.n	800051a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000620:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000624:	f7ff fdfa 	bl	800021c <HAL_GetTick>
 8000628:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800062a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800062c:	079f      	lsls	r7, r3, #30
 800062e:	f57f af41 	bpl.w	80004b4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000632:	f7ff fdf3 	bl	800021c <HAL_GetTick>
 8000636:	1b00      	subs	r0, r0, r4
 8000638:	2802      	cmp	r0, #2
 800063a:	d9f6      	bls.n	800062a <HAL_RCC_OscConfig+0x192>
 800063c:	e76d      	b.n	800051a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800063e:	4c33      	ldr	r4, [pc, #204]	@ (800070c <HAL_RCC_OscConfig+0x274>)
 8000640:	69e3      	ldr	r3, [r4, #28]
 8000642:	00d8      	lsls	r0, r3, #3
 8000644:	d424      	bmi.n	8000690 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8000646:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	69e3      	ldr	r3, [r4, #28]
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	61e3      	str	r3, [r4, #28]
 8000650:	69e3      	ldr	r3, [r4, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800065a:	4e2f      	ldr	r6, [pc, #188]	@ (8000718 <HAL_RCC_OscConfig+0x280>)
 800065c:	6833      	ldr	r3, [r6, #0]
 800065e:	05d9      	lsls	r1, r3, #23
 8000660:	d518      	bpl.n	8000694 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000662:	68eb      	ldr	r3, [r5, #12]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d126      	bne.n	80006b6 <HAL_RCC_OscConfig+0x21e>
 8000668:	6a23      	ldr	r3, [r4, #32]
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000670:	f7ff fdd4 	bl	800021c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000674:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000678:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800067a:	6a23      	ldr	r3, [r4, #32]
 800067c:	079b      	lsls	r3, r3, #30
 800067e:	d53f      	bpl.n	8000700 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8000680:	2f00      	cmp	r7, #0
 8000682:	f43f af1b 	beq.w	80004bc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000686:	69e3      	ldr	r3, [r4, #28]
 8000688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800068c:	61e3      	str	r3, [r4, #28]
 800068e:	e715      	b.n	80004bc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000690:	2700      	movs	r7, #0
 8000692:	e7e2      	b.n	800065a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000694:	6833      	ldr	r3, [r6, #0]
 8000696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800069a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800069c:	f7ff fdbe 	bl	800021c <HAL_GetTick>
 80006a0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a2:	6833      	ldr	r3, [r6, #0]
 80006a4:	05da      	lsls	r2, r3, #23
 80006a6:	d4dc      	bmi.n	8000662 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006a8:	f7ff fdb8 	bl	800021c <HAL_GetTick>
 80006ac:	eba0 0008 	sub.w	r0, r0, r8
 80006b0:	2864      	cmp	r0, #100	@ 0x64
 80006b2:	d9f6      	bls.n	80006a2 <HAL_RCC_OscConfig+0x20a>
 80006b4:	e731      	b.n	800051a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b6:	b9ab      	cbnz	r3, 80006e4 <HAL_RCC_OscConfig+0x24c>
 80006b8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006ba:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006be:	f023 0301 	bic.w	r3, r3, #1
 80006c2:	6223      	str	r3, [r4, #32]
 80006c4:	6a23      	ldr	r3, [r4, #32]
 80006c6:	f023 0304 	bic.w	r3, r3, #4
 80006ca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006cc:	f7ff fda6 	bl	800021c <HAL_GetTick>
 80006d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d2:	6a23      	ldr	r3, [r4, #32]
 80006d4:	0798      	lsls	r0, r3, #30
 80006d6:	d5d3      	bpl.n	8000680 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006d8:	f7ff fda0 	bl	800021c <HAL_GetTick>
 80006dc:	1b80      	subs	r0, r0, r6
 80006de:	4540      	cmp	r0, r8
 80006e0:	d9f7      	bls.n	80006d2 <HAL_RCC_OscConfig+0x23a>
 80006e2:	e71a      	b.n	800051a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e4:	2b05      	cmp	r3, #5
 80006e6:	6a23      	ldr	r3, [r4, #32]
 80006e8:	d103      	bne.n	80006f2 <HAL_RCC_OscConfig+0x25a>
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6223      	str	r3, [r4, #32]
 80006f0:	e7ba      	b.n	8000668 <HAL_RCC_OscConfig+0x1d0>
 80006f2:	f023 0301 	bic.w	r3, r3, #1
 80006f6:	6223      	str	r3, [r4, #32]
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	f023 0304 	bic.w	r3, r3, #4
 80006fe:	e7b6      	b.n	800066e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000700:	f7ff fd8c 	bl	800021c <HAL_GetTick>
 8000704:	1b80      	subs	r0, r0, r6
 8000706:	4540      	cmp	r0, r8
 8000708:	d9b7      	bls.n	800067a <HAL_RCC_OscConfig+0x1e2>
 800070a:	e706      	b.n	800051a <HAL_RCC_OscConfig+0x82>
 800070c:	40021000 	.word	0x40021000
 8000710:	42420000 	.word	0x42420000
 8000714:	20000000 	.word	0x20000000
 8000718:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800071c:	4c2a      	ldr	r4, [pc, #168]	@ (80007c8 <HAL_RCC_OscConfig+0x330>)
 800071e:	6862      	ldr	r2, [r4, #4]
 8000720:	f002 020c 	and.w	r2, r2, #12
 8000724:	2a08      	cmp	r2, #8
 8000726:	d03e      	beq.n	80007a6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000728:	2200      	movs	r2, #0
 800072a:	2b02      	cmp	r3, #2
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800072e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000730:	d12c      	bne.n	800078c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000732:	f7ff fd73 	bl	800021c <HAL_GetTick>
 8000736:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	0199      	lsls	r1, r3, #6
 800073c:	d420      	bmi.n	8000780 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800073e:	6a2b      	ldr	r3, [r5, #32]
 8000740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000744:	d105      	bne.n	8000752 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000746:	6862      	ldr	r2, [r4, #4]
 8000748:	68a9      	ldr	r1, [r5, #8]
 800074a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800074e:	430a      	orrs	r2, r1
 8000750:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000752:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8000754:	6862      	ldr	r2, [r4, #4]
 8000756:	430b      	orrs	r3, r1
 8000758:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800075c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800075e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000760:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000762:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <HAL_RCC_OscConfig+0x334>)
 8000764:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000766:	f7ff fd59 	bl	800021c <HAL_GetTick>
 800076a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	019a      	lsls	r2, r3, #6
 8000770:	f53f aea8 	bmi.w	80004c4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000774:	f7ff fd52 	bl	800021c <HAL_GetTick>
 8000778:	1b40      	subs	r0, r0, r5
 800077a:	2802      	cmp	r0, #2
 800077c:	d9f6      	bls.n	800076c <HAL_RCC_OscConfig+0x2d4>
 800077e:	e6cc      	b.n	800051a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000780:	f7ff fd4c 	bl	800021c <HAL_GetTick>
 8000784:	1b80      	subs	r0, r0, r6
 8000786:	2802      	cmp	r0, #2
 8000788:	d9d6      	bls.n	8000738 <HAL_RCC_OscConfig+0x2a0>
 800078a:	e6c6      	b.n	800051a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800078c:	f7ff fd46 	bl	800021c <HAL_GetTick>
 8000790:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	019b      	lsls	r3, r3, #6
 8000796:	f57f ae95 	bpl.w	80004c4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800079a:	f7ff fd3f 	bl	800021c <HAL_GetTick>
 800079e:	1b40      	subs	r0, r0, r5
 80007a0:	2802      	cmp	r0, #2
 80007a2:	d9f6      	bls.n	8000792 <HAL_RCC_OscConfig+0x2fa>
 80007a4:	e6b9      	b.n	800051a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	f43f aea2 	beq.w	80004f0 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80007ac:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007ae:	6a2b      	ldr	r3, [r5, #32]
 80007b0:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f47f ae9b 	bne.w	80004f0 <HAL_RCC_OscConfig+0x58>
 80007ba:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007bc:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007c0:	1ac0      	subs	r0, r0, r3
 80007c2:	bf18      	it	ne
 80007c4:	2001      	movne	r0, #1
 80007c6:	e6a9      	b.n	800051c <HAL_RCC_OscConfig+0x84>
 80007c8:	40021000 	.word	0x40021000
 80007cc:	42420000 	.word	0x42420000

080007d0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80007d0:	490d      	ldr	r1, [pc, #52]	@ (8000808 <HAL_RCC_GetSysClockFreq+0x38>)
 80007d2:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007d4:	f002 030c 	and.w	r3, r2, #12
 80007d8:	2b08      	cmp	r3, #8
 80007da:	d112      	bne.n	8000802 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007dc:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <HAL_RCC_GetSysClockFreq+0x3c>)
 80007de:	f3c2 4083 	ubfx	r0, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007e2:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007e4:	5c18      	ldrb	r0, [r3, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007e6:	d509      	bpl.n	80007fc <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e8:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007ea:	4909      	ldr	r1, [pc, #36]	@ (8000810 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ec:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007f0:	4348      	muls	r0, r1
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f2:	4413      	add	r3, r2
 80007f4:	7c1b      	ldrb	r3, [r3, #16]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80007fa:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_RCC_GetSysClockFreq+0x44>)
 80007fe:	4358      	muls	r0, r3
 8000800:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000802:	4803      	ldr	r0, [pc, #12]	@ (8000810 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	08000b30 	.word	0x08000b30
 8000810:	007a1200 	.word	0x007a1200
 8000814:	003d0900 	.word	0x003d0900

08000818 <HAL_RCC_ClockConfig>:
{
 8000818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800081c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800081e:	4604      	mov	r4, r0
 8000820:	b910      	cbnz	r0, 8000828 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000822:	2001      	movs	r0, #1
}
 8000824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000828:	4a44      	ldr	r2, [pc, #272]	@ (800093c <HAL_RCC_ClockConfig+0x124>)
 800082a:	6813      	ldr	r3, [r2, #0]
 800082c:	f003 0307 	and.w	r3, r3, #7
 8000830:	428b      	cmp	r3, r1
 8000832:	d328      	bcc.n	8000886 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000834:	6821      	ldr	r1, [r4, #0]
 8000836:	078e      	lsls	r6, r1, #30
 8000838:	d430      	bmi.n	800089c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800083a:	07ca      	lsls	r2, r1, #31
 800083c:	d443      	bmi.n	80008c6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800083e:	4a3f      	ldr	r2, [pc, #252]	@ (800093c <HAL_RCC_ClockConfig+0x124>)
 8000840:	6813      	ldr	r3, [r2, #0]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	42ab      	cmp	r3, r5
 8000848:	d865      	bhi.n	8000916 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800084a:	6822      	ldr	r2, [r4, #0]
 800084c:	4d3c      	ldr	r5, [pc, #240]	@ (8000940 <HAL_RCC_ClockConfig+0x128>)
 800084e:	f012 0f04 	tst.w	r2, #4
 8000852:	d16c      	bne.n	800092e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000854:	0713      	lsls	r3, r2, #28
 8000856:	d506      	bpl.n	8000866 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000858:	686b      	ldr	r3, [r5, #4]
 800085a:	6922      	ldr	r2, [r4, #16]
 800085c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000860:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000864:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000866:	f7ff ffb3 	bl	80007d0 <HAL_RCC_GetSysClockFreq>
 800086a:	686b      	ldr	r3, [r5, #4]
 800086c:	4a35      	ldr	r2, [pc, #212]	@ (8000944 <HAL_RCC_ClockConfig+0x12c>)
 800086e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	40d8      	lsrs	r0, r3
 8000876:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <HAL_RCC_ClockConfig+0x130>)
 8000878:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800087a:	4b34      	ldr	r3, [pc, #208]	@ (800094c <HAL_RCC_ClockConfig+0x134>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	f7ff fc8d 	bl	800019c <HAL_InitTick>
  return HAL_OK;
 8000882:	2000      	movs	r0, #0
 8000884:	e7ce      	b.n	8000824 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000886:	6813      	ldr	r3, [r2, #0]
 8000888:	f023 0307 	bic.w	r3, r3, #7
 800088c:	430b      	orrs	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000890:	6813      	ldr	r3, [r2, #0]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	428b      	cmp	r3, r1
 8000898:	d1c3      	bne.n	8000822 <HAL_RCC_ClockConfig+0xa>
 800089a:	e7cb      	b.n	8000834 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800089c:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <HAL_RCC_ClockConfig+0x128>)
 800089e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008a2:	bf1e      	ittt	ne
 80008a4:	685a      	ldrne	r2, [r3, #4]
 80008a6:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80008aa:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008ac:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008ae:	bf42      	ittt	mi
 80008b0:	685a      	ldrmi	r2, [r3, #4]
 80008b2:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80008b6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	68a0      	ldr	r0, [r4, #8]
 80008bc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80008c0:	4302      	orrs	r2, r0
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	e7b9      	b.n	800083a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c6:	6862      	ldr	r2, [r4, #4]
 80008c8:	4e1d      	ldr	r6, [pc, #116]	@ (8000940 <HAL_RCC_ClockConfig+0x128>)
 80008ca:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008cc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ce:	d11a      	bne.n	8000906 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d4:	d0a5      	beq.n	8000822 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008d8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008dc:	f023 0303 	bic.w	r3, r3, #3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80008e4:	f7ff fc9a 	bl	800021c <HAL_GetTick>
 80008e8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80008ea:	6873      	ldr	r3, [r6, #4]
 80008ec:	6862      	ldr	r2, [r4, #4]
 80008ee:	f003 030c 	and.w	r3, r3, #12
 80008f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80008f6:	d0a2      	beq.n	800083e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f8:	f7ff fc90 	bl	800021c <HAL_GetTick>
 80008fc:	1bc0      	subs	r0, r0, r7
 80008fe:	4540      	cmp	r0, r8
 8000900:	d9f3      	bls.n	80008ea <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000902:	2003      	movs	r0, #3
 8000904:	e78e      	b.n	8000824 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000906:	2a02      	cmp	r2, #2
 8000908:	d102      	bne.n	8000910 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800090a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800090e:	e7e1      	b.n	80008d4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000910:	f013 0f02 	tst.w	r3, #2
 8000914:	e7de      	b.n	80008d4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000916:	6813      	ldr	r3, [r2, #0]
 8000918:	f023 0307 	bic.w	r3, r3, #7
 800091c:	432b      	orrs	r3, r5
 800091e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000920:	6813      	ldr	r3, [r2, #0]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	42ab      	cmp	r3, r5
 8000928:	f47f af7b 	bne.w	8000822 <HAL_RCC_ClockConfig+0xa>
 800092c:	e78d      	b.n	800084a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800092e:	686b      	ldr	r3, [r5, #4]
 8000930:	68e1      	ldr	r1, [r4, #12]
 8000932:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000936:	430b      	orrs	r3, r1
 8000938:	606b      	str	r3, [r5, #4]
 800093a:	e78b      	b.n	8000854 <HAL_RCC_ClockConfig+0x3c>
 800093c:	40022000 	.word	0x40022000
 8000940:	40021000 	.word	0x40021000
 8000944:	08000b18 	.word	0x08000b18
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008

08000950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000950:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000952:	e003      	b.n	800095c <LoopCopyDataInit>

08000954 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000954:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000956:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000958:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800095a:	3104      	adds	r1, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800095c:	480a      	ldr	r0, [pc, #40]	@ (8000988 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000960:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000962:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000964:	d3f6      	bcc.n	8000954 <CopyDataInit>
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000968:	e002      	b.n	8000970 <LoopFillZerobss>

0800096a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800096c:	f842 3b04 	str.w	r3, [r2], #4

08000970 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000972:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000974:	d3f9      	bcc.n	800096a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000976:	f7ff fbe9 	bl	800014c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f000 f89d 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f000 f837 	bl	80009f0 <main>
  bx lr
 8000982:	4770      	bx	lr
  ldr r3, =_sidata
 8000984:	08000b4c 	.word	0x08000b4c
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000990:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000994:	20000040 	.word	0x20000040

08000998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_2_IRQHandler>

0800099a <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800099a:	b510      	push	{r4, lr}
 800099c:	b090      	sub	sp, #64	@ 0x40
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800099e:	2214      	movs	r2, #20
 80009a0:	2100      	movs	r1, #0
 80009a2:	a801      	add	r0, sp, #4
 80009a4:	f000 f880 	bl	8000aa8 <memset>
  RCC_OscInitTypeDef oscinitstruct = {0};
 80009a8:	2220      	movs	r2, #32
 80009aa:	2100      	movs	r1, #0
 80009ac:	a807      	add	r0, sp, #28
 80009ae:	f000 f87b 	bl	8000aa8 <memset>
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b2:	2310      	movs	r3, #16
 80009b4:	2201      	movs	r2, #1
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 80009b6:	2402      	movs	r4, #2
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80009bc:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80009c0:	a806      	add	r0, sp, #24
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 80009c2:	9406      	str	r4, [sp, #24]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80009c4:	940d      	str	r4, [sp, #52]	@ 0x34
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80009c6:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80009c8:	f7ff fd66 	bl	8000498 <HAL_RCC_OscConfig>
 80009cc:	b100      	cbz	r0, 80009d0 <SystemClock_Config+0x36>
  {
    /* Initialization Error */
    while(1); 
 80009ce:	e7fe      	b.n	80009ce <SystemClock_Config+0x34>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009d0:	230f      	movs	r3, #15
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80009d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	9003      	str	r0, [sp, #12]
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009dc:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80009de:	4621      	mov	r1, r4
 80009e0:	a801      	add	r0, sp, #4
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80009e2:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80009e4:	f7ff ff18 	bl	8000818 <HAL_RCC_ClockConfig>
 80009e8:	b100      	cbz	r0, 80009ec <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1); 
 80009ea:	e7fe      	b.n	80009ea <SystemClock_Config+0x50>
  }
}
 80009ec:	b010      	add	sp, #64	@ 0x40
 80009ee:	bd10      	pop	{r4, pc}

080009f0 <main>:
  LED2_GPIO_CLK_ENABLE();
 80009f0:	4d20      	ldr	r5, [pc, #128]	@ (8000a74 <main+0x84>)
{
 80009f2:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80009f4:	f7ff fbf4 	bl	80001e0 <HAL_Init>
  SystemClock_Config();
 80009f8:	f7ff ffcf 	bl	800099a <SystemClock_Config>
  LED2_GPIO_CLK_ENABLE();
 80009fc:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80009fe:	4c1e      	ldr	r4, [pc, #120]	@ (8000a78 <main+0x88>)
  LED2_GPIO_CLK_ENABLE();
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	61ab      	str	r3, [r5, #24]
 8000a06:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 8000a08:	4621      	mov	r1, r4
  LED2_GPIO_CLK_ENABLE();
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000a14:	e9c4 3301 	strd	r3, r3, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	60e3      	str	r3, [r4, #12]
  GPIO_InitStruct.Pin = LED2_PIN;
 8000a1c:	2320      	movs	r3, #32
  HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 8000a1e:	4817      	ldr	r0, [pc, #92]	@ (8000a7c <main+0x8c>)
  GPIO_InitStruct.Pin = LED2_PIN;
 8000a20:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 8000a22:	f7ff fc57 	bl	80002d4 <HAL_GPIO_Init>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 8000a28:	2000      	movs	r0, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	61ab      	str	r3, [r5, #24]
 8000a30:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	4621      	mov	r1, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a40:	e9c4 3000 	strd	r3, r0, [r4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	480e      	ldr	r0, [pc, #56]	@ (8000a80 <main+0x90>)
 8000a46:	f7ff fc45 	bl	80002d4 <HAL_GPIO_Init>
	  if((GPIOC->IDR & B1Pin) == 0)
 8000a4a:	4c0d      	ldr	r4, [pc, #52]	@ (8000a80 <main+0x90>)
			  HAL_GPIO_TogglePin(GPIOA, LEDPin);
 8000a4c:	f5a5 3584 	sub.w	r5, r5, #67584	@ 0x10800
	  if((GPIOC->IDR & B1Pin) == 0)
 8000a50:	68a3      	ldr	r3, [r4, #8]
 8000a52:	049a      	lsls	r2, r3, #18
 8000a54:	d4fc      	bmi.n	8000a50 <main+0x60>
		  if((GPIOC->IDR & B1Pin) == 0)
 8000a56:	68a3      	ldr	r3, [r4, #8]
 8000a58:	f413 5300 	ands.w	r3, r3, #8192	@ 0x2000
 8000a5c:	d1f8      	bne.n	8000a50 <main+0x60>
 8000a5e:	4a09      	ldr	r2, [pc, #36]	@ (8000a84 <main+0x94>)
			  HAL_GPIO_TogglePin(GPIOA, LEDPin);
 8000a60:	2120      	movs	r1, #32
 8000a62:	4628      	mov	r0, r5
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	f7ff fd0d 	bl	8000484 <HAL_GPIO_TogglePin>
			  while ((GPIOC->IDR & B1Pin) == 0);
 8000a6a:	68a3      	ldr	r3, [r4, #8]
 8000a6c:	049b      	lsls	r3, r3, #18
 8000a6e:	d5fc      	bpl.n	8000a6a <main+0x7a>
 8000a70:	e7ee      	b.n	8000a50 <main+0x60>
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	2000002c 	.word	0x2000002c
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	40011000 	.word	0x40011000
 8000a84:	2000003c 	.word	0x2000003c

08000a88 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000a88:	4770      	bx	lr

08000a8a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler>

08000a8c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler>

08000a8e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler>

08000a90 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler>

08000a92 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8000a94:	4770      	bx	lr

08000a96 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Handler>:
  */

uint32_t gTimeDelay;

void SysTick_Handler(void)
{gTimeDelay++;
 8000a98:	4a02      	ldr	r2, [pc, #8]	@ (8000aa4 <SysTick_Handler+0xc>)
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]
  HAL_IncTick();
 8000aa0:	f7ff bbb0 	b.w	8000204 <HAL_IncTick>
 8000aa4:	2000003c 	.word	0x2000003c

08000aa8 <memset>:
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4402      	add	r2, r0
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d100      	bne.n	8000ab2 <memset+0xa>
 8000ab0:	4770      	bx	lr
 8000ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ab6:	e7f9      	b.n	8000aac <memset+0x4>

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	2600      	movs	r6, #0
 8000abc:	4d0c      	ldr	r5, [pc, #48]	@ (8000af0 <__libc_init_array+0x38>)
 8000abe:	4c0d      	ldr	r4, [pc, #52]	@ (8000af4 <__libc_init_array+0x3c>)
 8000ac0:	1b64      	subs	r4, r4, r5
 8000ac2:	10a4      	asrs	r4, r4, #2
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	f000 f81a 	bl	8000b00 <_init>
 8000acc:	2600      	movs	r6, #0
 8000ace:	4d0a      	ldr	r5, [pc, #40]	@ (8000af8 <__libc_init_array+0x40>)
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8000afc <__libc_init_array+0x44>)
 8000ad2:	1b64      	subs	r4, r4, r5
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08000b44 	.word	0x08000b44
 8000af4:	08000b44 	.word	0x08000b44
 8000af8:	08000b44 	.word	0x08000b44
 8000afc:	08000b48 	.word	0x08000b48

08000b00 <_init>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr

08000b0c <_fini>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr
